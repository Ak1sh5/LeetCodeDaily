class Solution {
public:
    bool dfs(int start,int c,vector<int>&color,vector<int>adj[]){
         color[start]=c;

         for(auto it:adj[start]){
            if(color[it]==-1){
                if(!dfs(it,!c,color,adj)) return false;
            }
            else if(color[it]==color[start]) return false;
         }
         return true;
    }
    bool isBipartite(vector<vector<int>>& graph) {
       
       int n = graph.size();
        vector<int>adj[n];
        vector<int>color(n,-1);

           for (int i = 0; i < n; i++) {
            for (int j : graph[i]) {  
                adj[i].push_back(j);
                adj[j].push_back(i);  
            }
        }

        for(int i=0;i<n;i++){
           if(color[i]==-1){
               if(!dfs(i,0,color,adj))return false;
           }
        }
        return true;
    }
};